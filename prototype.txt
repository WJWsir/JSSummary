/*
* 0. 原型的本质是对象，即原型是一种特殊的对象
* 1. 如何给对象设置原型：通过设置对象的隐藏且必有的属性__proto__的值
* 2. 对象被设置原型后，属性与方法得到扩展，从点访问符的编程使用中可以看的出来
* 3. 原型链不过是原型概念模型的自然延伸，理解原型自然就会有对象的原型对象的原型对象
* 4. 原型的概念是描述对象间的继承或扩展关系
* 5. 给对象设置原型的约束：原型链不可以是闭环的，同时__proto__属性值设置只有两种可能，对象或者null
* 6. 如何判断对象的属性是从原型得到的还是自己的：通过调用对象的hasOwnProperty(key)的bol类型结果看出
* 7. 对象的属性可以分为自身的属性以及继承的属性，在枚举或获取对象的属性时注意枚举获取对象的属性包含的范围，比如获取自身的属性、枚举可枚举的自身以及继承属性
*/

/*
* 0. 类的本质是函数，即JavaScript中使用class构造object的实质是使用function构造object
* 1. 所有的函数都有prototype属性，属性值为一个对象
* 2. 所有的函数都有__proto__属性，属性值为Function函数的prototype属性值，即F.__proto === Function.prototype
* 3. 所有由function构造的object(new 运算)，它的__proto__ —— 原型为函数的prototype，简单表示为F.prototype === (new F()).__proto__
*/
